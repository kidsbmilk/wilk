package com.zz4955.ehcache_springboot_ex2.controller.wilkt;

import com.jcraft.jsch.*;
import com.zz4955.ehcache_springboot_ex2.tool.wilkt.MyUserInfo;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.io.*;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;

@RestController
public class CommandController {
    private static JSch jSch = new JSch();
    private static Session session;
    private static InputStream inputStream;
    private static OutputStream outputStream;
    private static BufferedReader in;

    static {
        try {
            session = jSch.getSession("0.0.0.0");
        } catch (JSchException e) {
            e.printStackTrace();
        }
    }

    @RequestMapping(method = RequestMethod.GET, value = "/start")
    public String start() throws JSchException, IOException, InterruptedException {
        session = jSch.getSession("zhangzhen5", "relay.xiaomi.com");
        session.setUserInfo(new MyUserInfo());
        session.connect();
        ChannelShell channel = (ChannelShell) session.openChannel("shell");
        channel.connect();
        inputStream = channel.getInputStream();
        outputStream = channel.getOutputStream();
        in = new BufferedReader(new InputStreamReader(inputStream));
        outputStream.write("\n\r".getBytes());
        outputStream.flush();
        String msg = null;
        StringBuilder sb = new StringBuilder();
        boolean b = true;
        byte[] tmp = new byte[1024];
        String stp;
        int count = 5;
        while(true) {
            while (inputStream.available() > 0) {
                int i = inputStream.read(tmp, 0, 1024);
                if (i < 0) {
                    return sb.toString();
                }
                String msgtp = new String(tmp, 0, i);
                sb.append(msgtp);
            }
            stp = sb.toString();
            if(stp.length() > 7) {
                Arrays.stream(stp.substring(7).split("\n\r")).forEach(s -> System.out.println(s));
                break;
            } else {
                Arrays.stream(stp.split("\n\r")).forEach(s -> System.out.println(s));
            }
            count --;
            if(count < 0) {
                break;
            }
            Thread.sleep(1 * 1000);
        }
        return stp;
    }

    /**
     * 输入输出真的是一个非常麻烦的东西。
     *
     */
    @RequestMapping(method = RequestMethod.GET, value = "exec")
    public String exec(@RequestParam("cmd") String cmd) throws IOException {
        StringBuilder sb = new StringBuilder();
        outputStream.write((cmd + "\n\r").getBytes());
        outputStream.flush();
        byte[] tmp = new byte[1024];
        int count = 10;
        while(true) {
            while (inputStream.available() > 0) { // 基本上一次就可以读完，所以，这里只有一层while却输出了完整的信息。但是，这样始终是不安全的。FIXME.
                int i = inputStream.read(tmp, 0, 1024);
                if (i < 0) {
                    break;
                }
                String msgtp = new String(tmp, 0, i);
//                System.out.println(msgtp);
                sb.append(msgtp);
            }
            Arrays.stream(sb.toString().split("\n\r")).forEach(s -> System.out.println(s));
            sb = new StringBuilder();
            count --;
            if(count <= 0) {
                break;
            }
        }
//        String msg = null;
//        while ((msg = in.readLine()) != null) {
//            sb.append(msg);
//            System.out.println(msg);
//            if(msg.substring(5).startsWith("relay-shell")) {
//                break;
//            }
//        }
        return sb.toString();
    }
}
